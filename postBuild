#!/bin/bash

# NOTE: this script is not run as root user

# maybe use https://discourse.jupyter.org/t/how-to-reduce-mybinder-org-repository-startup-time/4956/2 ? to pre-build docker image?
# there is also a pre-built tex-live docker for small and other installs... https://hub.docker.com/r/texlive/texlive/tags?name=small
## install texlive manually
# ok so do I just install the full tex and have it take an hour the first time this builds? How long do images stay around on the server? Will I have to wait an hour every 30 days? 7 days?
# prob use medium or small scheme, then tlmgr to add anything else I need
# scheme options are (time estimates are from mybinder.org builds on 20250605):
#  a [X] full scheme (everything) - about an hour and 10 minutes
#  b [ ] medium scheme (small + more packages and languages) - about 12 minutes, 1485 packages
#  c [ ] small scheme (basic + xetex, metapost, a few languages) - about 3 minutes, 347 packages
#  d [ ] basic scheme (plain and latex)
#  e [ ] minimal scheme (plain only)
#  f [ ] infrastructure-only scheme (no TeX at all)
#  g [ ] book publishing scheme (core LaTeX and add-ons)
#  h [ ] ConTeXt scheme
#  i [ ] GUST TeX Live scheme
#  j [ ] teTeX scheme (more than medium, but nowhere near full)
#  k [ ] custom selection of collections

cd /tmp
wget https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
zcat <install-tl-unx.tar.gz | tar xf -
cd install-tl-2*
perl ./install-tl --no-interaction --paper=letter --texdir=/home/jovyan/tex-live --scheme=small

# I installed tex-live to the user's home dir because of course it is writeable,
# but this also allows for any user to use the gui file explorer to upload a new CTAN package to the install if needed
echo "export PATH=/home/jovyan/tex-live/bin/x86_64-linux:$PATH" >>/home/jovyan/.profile
source /home/jovyan/.profile

echo "Which xelatex? $(which xelatex)"
echo "Which tlmgr? $(which tlmgr)"
echo "Printing installed packages via tlmgr:"
tlmgr info --only-installed

# packages to install from ctan:
tlmgr install datetime2 comment cm-super dvipng

# run matplotlib once to generate the font cache
python -c "import matplotlib as mpl; mpl.use('Agg'); import pylab as plt; fig, ax = plt.subplots(); fig.savefig('test.png')"

test -e test.png && rm test.png
